Git命令大全：

	# 显示当前的Git配置
	$ git config --list

	# 编辑Git配置文件
	$ git config -e [--global]

	# 设置提交代码时的用户信息
	$ git config [--global] user.name "[name]"
	$ git config [--global] user.email "[email address]"

	# 把当前的目录变成可以管理的git仓库并生成隐藏.git文件
	$ git init

	# 提交暂存区到仓库区
	$ git commit -m "我是注释"


二、增加/删除文件
	# 创建一个文件夹(xx指文件夹)
	$ mkdir xx

	# 添加指定文件到暂存区
	$ git add [file1] [file2] ...

	# 添加指定目录到暂存区，包括子目录
	$ git add [dir]

	# 添加当前目录的所有文件到暂存区
	$ git add

	# 删除工作区文件，并且将这次删除放入暂存区
	$ git rm [file1] [file2] ...

	# 删除文件
	$ git rm xx

	# 移除空目录
	$ git clean -fd


三、查看信息
	# 显示当前目录路径
	$ pwd

	# 查看文件内容
	$ cat readme.txt

	# 显示有变更的文件
	$ git status

	# 显示当前分支的版本历史(默认显示3次)
	$ git log

	显示所有版本历史
	$ git log --pretty=oneline

	# 展开显示每次提交的内容差异
	$ git log -p

	# 获取版本号
	$ git reflog

	# 显示commit历史，以及每次commit发生变更的文件
	$ git log --stat

	# 搜索提交历史，根据关键词
	$ git log -S [keyword]

	# 显示过去5次提交
	$ git log -5 --pretty --oneline

	# 显示暂存区和工作区的差异
	$ git diff

	# 显示今天你写了多少行代码
	$ git diff --shortstat "@{0 day ago}"

	# 显示历史记录的简洁的版本
	$ git log --oneline

	# 显示历史中什么时候出现了分支、合并
	$ git log --oneline --graph

	# 倒序显示
	$ git log --reverse --oneline

	# 根据用户名称显示
	$ git log --author="xx"

	# 比较历史不同版本的文件
	$ git diff xxxx1 xxxx2 -- filename


四、分支
	# 列出所有本地分支
	$ git branch

	# 列出所有远程分支
	$ git branch -r

	# 列出所有本地分支和远程分支
	$ git branch -a

	# 新建一个分支，但依然停留在当前分支
	$ git branch [branch-name]

	# 新建一个分支，并切换到该分支
	$ git checkout -b [branch]

	# 新建一个分支，指向指定commit
	$ git branch [branch] [commit]

	# 新建一个分支，与指定的远程分支建立追踪关系
	$ git branch --track [branch] [remote-branch]

	# 切换到指定分支，并更新工作区
	$ git checkout [branch-name]

	# 切换到上一个分支
	$ git checkout -

	# 建立追踪关系，在现有分支与指定的远程分支之间
	$ git branch --set-upstream [branch] [remote-branch]

	# 合并指定分支到当前分支
	$ git merge [branch]

	# 选择一个commit，合并进当前分支
	$ git cherry-pick [commit]

	# 删除分支
	$ git branch -d [branch-name]

	# 删除远程分支
	$ git push origin --delete [branch-name]
	$ git branch -dr [remote/branch]


五、标签
	# 列出所有tag
	$ git tag

	# 新建一个tag在当前commit
	$ git tag [tag]

	# 新建一个tag在指定commit
	$ git tag [tag] [commit]

	# 删除本地tag
	$ git tag -d [tag]

	# 删除远程tag
	$ git push origin :refs/tags/[tagName]

	# 查看tag信息
	$ git show [tag]

	# 提交指定tag
	$ git push [remote] [tag]

	# 提交所有tag
	$ git push [remote] --tags

	# 新建一个分支，指向某个tag
	$ git checkout -b [branch] [tag]


六、同步远程
	# 下载一个项目和它的整个代码历史
	$ git clone [url]

	# 下载远程仓库的所有变动
	$ git fetch [remote]

	# 显示所有远程仓库
	$ git remote -v

	# 显示某个远程仓库的信息
	$ git remote show [remote]

	# 增加一个新的远程仓库，并命名
	$ git remote add origin url

	# 取回远程仓库的变化，并与本地分支合并
	$ git pull [remote] [branch]

	# 远程库与本地同步合并
	$ git pull --rebase origin master

	# 上传本地指定分支到远程仓库
	$ git push origin  [branch]

	# 强行推送当前分支到远程仓库，即使有冲突
	$ git push [remote] --force

	# 推送所有分支到远程仓库
	$ git push [remote] --all


七、撤销
	# 恢复暂存区的指定文件到工作区
	$ git checkout [file]

	# 恢复某个commit的指定文件到暂存区和工作区
	$ git checkout [commit] [file]

	# 恢复暂存区的所有文件到工作区
	$ git checkout .

	# 恢复到指定版本号
	$ git reset  --hard 版本号

	# 退回上个历史版本
	$ git reset  --hard HEAD^

	# 退回上100个历史版本
	$ git reset  --hard HEAD~100

	# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变
	$ git reset [file]

	# 重置暂存区与工作区，与上一次commit保持一致
	$ git reset --hard

	# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变
	$ git reset [commit]

	# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致
	$ git reset --hard [commit]

	# 重置当前HEAD为指定commit，但保持暂存区和工作区不变
	$ git reset --keep [commit]

	# 新建一个commit，用来撤销指定commit
	# 后者的所有变化都将被前者抵消，并且应用到当前分支
	$ git revert [commit]

	# 暂时将未提交的变化移除，稍后再移入
	$ git stash
	$ git stash pop


提示：在使用git log命令查看历史记录时，使用 空格、enter键、B、以及上下键来进行翻页，使用q退出历史查看